#version 460

struct Triangle {
    // Counter-clockwise order
    vec3 vertices[3];
    vec3 normal;
    vec2 uv[3];
};

struct Bvh {
    vec3 min_bound;
    vec3 max_bound;
    uint left_offset;
    uint right_offset;
    uint triangle_offset;
    uint triangle_count;
};

struct Model {
    uint bvh_index;
    uint material_id;
};

struct Material {
    vec3 color;
    float emission_strength;
    float albedo;
    float smoothness;
};

struct Camera {
    vec3 position;
    vec3 view;
    vec3 up;
    vec3 right;
};

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D img;

layout(set = 0, binding = 1) readonly uniform CameraBuffer {
    Camera camera;
};
layout(set = 0, binding = 2) readonly buffer TrianglesBuffer {
    Triangle triangles[];
};
layout(set = 0, binding = 3) readonly buffer Materials {
    Material materials[];
};
layout(set = 0, binding = 4) readonly buffer ModelsBuffer {
    Model models[];
};
layout(set = 0, binding = 5) readonly buffer BvhBuffer {
    Bvh bvhs[];
};

layout(push_constant) uniform ShaderConstants {
    uint max_bounce_count;
    uint nb_samples;
} shader_constants;

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct HitRecord {
    Material material;
    vec3 hit_point;
    vec3 normal;
    float t;
};

const float infinity = 1.0 / 0.0;

// PCG
uint hash(inout uint state) {
    state = state * 747796405 + 2891336453;
    uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
    result = (result >> 22) ^ result;
    return result;
}
// float in [0:1] from uint
float floatConstruct(in uint m) {
    const uint ieeeMantissa = 0x007FFFFFu; // mantissa bitmask
    const uint ieeeOne = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa; // Keep only mantissa bits
    m |= ieeeOne; // Add fractional part to 1.0

    float result = uintBitsToFloat(m); // Range [1:2]
    return result - 1.0;
}

// Random float in [0:1]
float random(inout uint state) { return floatConstruct(hash(state)); }

// Random float in [-1:1] with normal distribution
float random_normal(inout uint state) {
    float theta = 2.0 * 3.14159265359 * random(state);
    return sqrt(-2.0 * log(random(state))) * cos(theta);
}

// Random direction on unit sphere
vec3 random_dir(inout uint state) {
    float a = random_normal(state);
    float b = random_normal(state);
    float c = random_normal(state);

    return normalize(vec3(a, b, c));
}

vec2 random_in_circle(inout uint state) {
    float angle = 2.0 * 3.14159265359 * random(state);
    vec2 point = vec2(cos(angle), sin(angle));
    return point * sqrt(random(state));
}

// MÃ¶ller-Trumbore intersection algorithm
bool ray_triangle_intersect(in Ray ray, in Triangle triangle, out HitRecord hit_record) {
    float determinant = -dot(ray.direction, triangle.normal);

    if (determinant < 1e-4) {
        return false;
    }

    vec3 edge1 = triangle.vertices[1] - triangle.vertices[0];
    vec3 edge2 = triangle.vertices[2] - triangle.vertices[0];

    vec3 ao = ray.origin - triangle.vertices[0];
    vec3 dao = cross(ao, ray.direction);

    float inv_determinant = 1.0 / determinant;

    float dst = dot(ao, triangle.normal) * inv_determinant;
    float u = dot(edge2, dao) * inv_determinant;
    float v = -dot(edge1, dao) * inv_determinant;
    float w = 1 - u - v;

    if (dst >= 0.0 && u >= 0.0 && v >= 0.0 && w >= 0.0) {
        // TODO: Textures
        // vec2 uv = triangle.uv[0] * u + triangle.uv[1] * v + triangle.uv[2] * w;

        hit_record.t = dst;
        hit_record.hit_point = ray.origin + ray.direction * dst;
        hit_record.normal = normalize(triangle.normal);
        // TODO: Material ID
        hit_record.material = materials[0];

        return true;
    }

    return false;
}

float ray_bvh_intersect(in Ray ray, in Bvh bvh) {
    vec3 t0 = (bvh.min_bound - ray.origin) / ray.direction;
    vec3 t1 = (bvh.max_bound - ray.origin) / ray.direction;
    float tmin = max(max(min(t0.x, t1.x), min(t0.y, t1.y)), min(t0.z, t1.z));
    float tmax = min(min(max(t0.x, t1.x), max(t0.y, t1.y)), max(t0.z, t1.z));

    bool hit = tmax >= tmin && tmax > 0.0;
    float dst = hit ? tmin > 0 ? tmin: 0: infinity;
    return dst;
}

HitRecord ray_hit_bvh(in Ray ray, in uint bvh_index) {
    HitRecord hit_record;
    hit_record.t = infinity;

    const uint max_depth = 25;
    uint bvh_stack[max_depth];
    uint stack_size = 0;
    bvh_stack[stack_size++] = bvh_index;

    while (stack_size > 0) {
        Bvh current_bvh = bvhs[bvh_stack[--stack_size]];
        
        // Leaf node
        if (stack_size+1 == max_depth || current_bvh.left_offset == 0) {
            for (int i = 0; i < current_bvh.triangle_count; i++) {
                Triangle triangle = triangles[current_bvh.triangle_offset + i];
                HitRecord triangle_hit_record;

                if (ray_triangle_intersect(ray, triangle, triangle_hit_record)) {
                    if (triangle_hit_record.t < hit_record.t) {
                        hit_record = triangle_hit_record;
                    }
                }
            }
            // Debug smallest BVH
            // float dst = ray_bvh_intersect(ray, current_bvh);
            // if (dst < hit_record.t) {
            //     hit_record.t = dst;
            //     hit_record.hit_point = ray.origin + ray.direction * dst;
            //     hit_record.normal = current_bvh.max_bound - current_bvh.min_bound;
            //     hit_record.material = materials[0];
            // }
        } else {
            float dst_left = ray_bvh_intersect(ray, bvhs[current_bvh.left_offset]);
            float dst_right = ray_bvh_intersect(ray, bvhs[current_bvh.right_offset]);

            float near_dst = min(dst_left, dst_right);
            uint near_index = dst_left < dst_right ? current_bvh.left_offset: current_bvh.right_offset;
            float far_dst = max(dst_left, dst_right);
            uint far_index = dst_left < dst_right ? current_bvh.right_offset: current_bvh.left_offset;

            if (near_dst < hit_record.t && stack_size < max_depth) {
                bvh_stack[stack_size++] = near_index;
            }
            if (far_dst < hit_record.t && stack_size < max_depth) {
                bvh_stack[stack_size++] = far_index;
            }
        }

    }

    return hit_record;
}

Ray jittered_primary_ray(in vec2 uv, in float aspect_ratio, inout uint state) {
    vec2 point_in_circle = random_in_circle(state);
    vec2 jittered_uv = uv + point_in_circle / imageSize(img);

    vec2 trans = 2.0 * (jittered_uv) - vec2(1.0);

    vec3 dir = camera.view + camera.right * (trans.x) - camera.up * trans.y;
    dir *= vec3(aspect_ratio, 1.0, aspect_ratio);

    Ray ray;
    ray.origin = camera.position;
    ray.direction = normalize(dir);

    return ray;
}

vec3 sky_color(vec3 direction) {
    const vec3 ground = vec3(0.07, 0.2, 0.1);
    const vec3 horizon = vec3(0.15, 0.2, 0.4);
    const vec3 zenith = vec3(0.08, 0.37, 0.73);

    float gradient = pow(smoothstep(0.0, 0.4, direction.y), 0.35);
    float ground_sky_blend = smoothstep(-0.001, 0.0, direction.y);
    vec3 sky_gradient = mix(horizon, zenith, gradient);
    float sun = pow(max(0, dot(direction, normalize(vec3(0.0, 1.0, 0.0)))), 1.5) * 0.5;
    vec3 sky = mix(ground, sky_gradient, ground_sky_blend) + (ground_sky_blend >= 1 ? vec3(sun) * vec3(1.0, 1.0, 0.9): vec3(0.0)) ;

    return sky;
}

vec3 compute_color(in Ray ray, inout uint state) {
    vec3 incoming_light = vec3(0.0);
    vec3 color = vec3(1.0);

    for (int bounce = 0; bounce < shader_constants.max_bounce_count; bounce++) {
        HitRecord closest_hit_record;
        closest_hit_record.t = infinity;

        for (int model_index = 0; model_index < models.length(); model_index++) {
            Model model = models[model_index];
            HitRecord hit_record = ray_hit_bvh(ray, model.bvh_index);

            if (hit_record.t < closest_hit_record.t) {
                closest_hit_record = hit_record;
                // TODO: Material ID
                closest_hit_record.material = materials[model.material_id];
            }
        }

        if (closest_hit_record.t < infinity) {
            vec3 diffuse_dir = normalize(closest_hit_record.normal + random_dir(state));
            vec3 specular_dir = reflect(ray.direction, closest_hit_record.normal);
            vec3 direction = mix(diffuse_dir, specular_dir, closest_hit_record.material.smoothness);

            vec3 emitted_light = closest_hit_record.material.color * closest_hit_record.material.emission_strength;
            incoming_light += emitted_light * color;
            color *= closest_hit_record.material.color * closest_hit_record.material.albedo;

            float p = max(max(color.r, color.g), color.b);
            // Russian roulette
            if (random(state) > p) {
                break;
            }
            color /= p;

            ray = Ray(closest_hit_record.hit_point, direction);
        } else {
            incoming_light += color * sky_color(ray.direction);
            break;
        }
    }

    return incoming_light;
}

void main() {
    const vec2 dim = imageSize(img);
    const vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;
    const float aspect_ratio = dim.x / dim.y;

    vec3 accumulated_color = vec3(0.0);

    // TODO: Only accumulate if hit ?
    for (int s = 0; s < shader_constants.nb_samples; s++) {
        uint state = s*685743 + gl_GlobalInvocationID.x*9841 + gl_GlobalInvocationID.y;
        // TODO: Don't jitter randomly but in a spherical grid (with more ray closer to the center)
        Ray jittered_ray = jittered_primary_ray(uv, aspect_ratio, state);
        accumulated_color += compute_color(jittered_ray, state);
    }

    vec3 color = accumulated_color / float(shader_constants.nb_samples);

    // Gamma correction
    color = pow(color, vec3(1.0 / 2.2));

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}
